<?xml version='1.0' encoding='UTF-8' ?>
<launch>

	<param name="/use_sim_time" value="true" />
	 
	<!-- ############################## Gazebo mit ausgewählter Welt starten ##################################### -->               
	
	<node name="gazebo" pkg="gazebo" type="gazebo" args="-u $(find hector_nist_arena_worlds)/worlds/go2011_arena.world" respawn="false" output="screen"/>
	
	<!--<node name="gazebo" pkg="gazebo" type="gazebo" args="-u $(find gazebo_worlds)/worlds/empty.world" respawn="false" output="screen"/>-->
	<!--<node name="gazebo" pkg="gazebo" type="gazebo" args="-u $(find gazebo_worlds)/worlds/wg_collada.world" respawn="false" output="screen"/>-->
	<node name="gazebo_gui" pkg="gazebo" type="gui" respawn="false" output="screen"/>
	
	<param name="robot_description" command="$(find xacro)/xacro.py '$(find volksbot_new)/urdf/volksbot2013.urdf.xacro'" />
	 <node name="spawn_minibot_model" pkg="gazebo" type="spawn_model"
     args="-x 11.0 -y 4.0 -z 0.3 -pause -urdf -param robot_description -model rescue_robot"
     respawn="false" output="screen" />
     
     <!--<param name="r2d2_description" command="$(find xacro)/xacro.py '$(find volksbot_new)/urdf/vic_box.urdf.xacro'" />-->
  	<!--<node name="spawn_r2d2" pkg="gazebo" type="spawn_model"
     args="-x 2.5 -y 2.0 -z 0.5 -pause -urdf -file '$(find volksbot_new)/urdf/vic_box.urdf' -model r2d2"
     respawn="false" output="screen" />-->
	<node name="spawn_vicbox" pkg="gazebo" type="spawn_model"
    	args="-x -0.1 -y 0.0 -z 0.5 -pause -urdf -file '$(find volksbot_new)/urdf/vic_box.urdf' -model vicbox"
    	respawn="false" output="screen" />
	
	<arg name="gui" default="False" />
		<node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher" >
			<param name="rate" type="double" value="1000.0" />
			<param name="use_gui" value="$(arg gui)"/>
		</node>
	
	<node pkg="robot_pose_ekf" type="robot_pose_ekf" name="robot_pose_ekf">
	    <param name="output_frame" value="odom_combined"/> <!--Name des Frames bzw. Topic -->
	    <param name="freq" value="30.0"/> <!--Frequenz des Datenstroms -->
	    <param name="sensor_timeout" value="1.0"/> <!--Zeit nach der ein Sensor nicht mehr
	 				verwendet wird, wenn keine Daten mehr empfangen werden -->
	    <param name="publish_tf" value="true"/>  <!--tf-Transformation-->
	    <param name="odom_used" value="true"/> <!--Einbeziehung der Rad-Odometrie -->
	    <param name="imu_used" value="false"/> <!--Einbeziehung des IMU-Sensors--> 
	    <param name="vo_used" value="false"/> <!--Einbeziehung einer visuellen Odometrie-->
	    <param name="debug" value="false"/> <!--benötigt für Logfiles -->
	    <param name="self_diagnose" value="false"/> <!--Hinweise zum richtigen Betrieb -->
    </node>
		
	<node pkg="robot_state_publisher" type="state_publisher" name="robot_state_publisher" output="screen">
		<param name="publish_frequency" type="double" value="50.0" />
		<param name="tf_prefix" type="string" value="" />
	</node>	
          	
	<node name = "joy_node" pkg = "joy" type = "joy_node" output = "screen">
		<param name = "dev" type = "string" value = "/dev/input/js0"/>
	</node>	
	
	<node name = "joy_to_vel" pkg = "ohm_joyToVel" type = "ohm_joyToVel" output = "screen">
		<param name = "joystickUsed" type = "bool" value = "true"/>
		<!--<param name = "vel_publisher_topic" type = "string" value = "/cmd_vel"/>-->
	</node>
	
	<node pkg = "twist_switch" name = "twist_switch" type = "twist_switch" output = "screen">
		<param name = "multiplicate" type = "double" value = "2.0"/>
	</node>	
	
	<node name = "image_view" pkg = "image_view" type = "image_view" args = "image:=/camera/camera/image_raw" output = "screen">
		<param name = "image_transport" type = "string" value = "compressed"/>
	</node>

	 <node pkg = "sound_play" name = "soundplay_node" type = "soundplay_node.py"/>
	 <node pkg = "sound_player" name = "sound_player" type = "sound_player">
	 	<param name = "audio_path" type="string" value = "$(find sound_player)/sounds/"/>
	 </node>	
	 
	 <node pkg = "position_reader" name = "position_reader" type = "position_reader"/>
	<!--<node name = "position_reader" pkg = "position_reader" type = "pos_reader" output = "screen"/>-->

</launch>

