<?xml version="1.0"?>

<launch>
 <param name="/use_sim_time" value="true" />
 
<!-- ############################## Gazebo mit ausgewählter Welt starten ##################################### -->               

 <node name="gazebo" pkg="gazebo" type="gazebo" args="-u $(find hector_nist_arena_worlds)/worlds/wg_collada.world" respawn="false" output="screen"/>
<node name="gazebo_gui" pkg="gazebo" type="gui" respawn="false" output="screen"/>

<!-- Maps  -->
<!-- hector_nist_arena_worlds :  maze_10m_x_14m.world  go2011_arena.world -->
<!-- gazebo_worlds :  wg_collada.world   empty.world  balcony.word    -->

<!-- ###############################   Roboter suchen und spawnen  #########################################  -->

 <param name="robot_description" command="$(find xacro)/xacro.py '$(find volksbot_new)/urdf/volksbot2013.urdf.xacro'" />
  <node name="spawn_roboter" pkg="gazebo" type="spawn_model" args="-z 0.3 -pause -urdf -param robot_description -model volksbot" respawn="false" output="screen"/>
  
<!-- ###################### Odometry aus wheel_odom (vom controller) und evtl imu sens ######################## -->
 
 <node pkg="robot_pose_ekf" type="robot_pose_ekf" name="robot_pose_ekf">
    <param name="output_frame" value="odom_combined"/> <!--Name des Frames bzw. Topic -->
    <param name="freq" value="30.0"/> <!--Frequenz des Datenstroms -->
    <param name="sensor_timeout" value="1.0"/> <!--Zeit nach der ein Sensor nicht mehr
 				verwendet wird, wenn keine Daten mehr empfangen werden -->
    <param name="publish_tf" value="true"/>  <!--tf-Transformation-->
    <param name="odom_used" value="true"/> <!--Einbeziehung der Rad-Odometrie -->
    <param name="imu_used" value="false"/> <!--Einbeziehung des IMU-Sensors--> 
    <param name="vo_used" value="false"/> <!--Einbeziehung einer visuellen Odometrie-->
    <param name="debug" value="false"/> <!--benötigt für Logfiles -->
    <param name="self_diagnose" value="false"/> <!--Hinweise zum richtigen Betrieb -->
  </node>


<!-- ############################# Publish Joint States and tf info for the wheels ####################### -->

	<arg name="gui" default="False" />
	<node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher" >
		<param name="rate" type="double" value="1000.0" />
		<param name="use_gui" value="$(arg gui)"/>
	</node>

<!-- ############################### start robot state publisher ################################# -->

	<node pkg="robot_state_publisher" type="state_publisher" name="robot_state_publisher" output="screen" >
		<param name="publish_frequency" type="double" value="50.0" />
		<param name="tf_prefix" type="string" value="" />
	</node>
 
  <!-- ############################# start joystick  ############################################### -->
<!--
  <node pkg="joynew" type="joy_node" name="joy"/>
  <node pkg="gazebo_joystick" type="gazeboJoystick" name="gazebo_joy"/>
-->
<!-- ##################################  move_base  ###############################################  -->
<!--
 	<node pkg="move_base" type="move_base" name="move_base">
 	<param name="controller_frequency" value="20.0"/>
 	<param name="planner_patience" value="5.0"/>
 	<param name="controller_patience" value="15.0"/>
 	<param name="conservative_reset_dist" value="3.0"/>
 	<param name="recovery_behavior_enabled" value="true"/>
 	<param name="clearing_rotation_allowed" value="true"/>
	<param name="shutdown_costmaps" value="false"/>
	<param name="oscillation_timeout" value="0.0"/>
	<param name="oscillation_distance" value="0.5"/>
	<param name="planner_frequency" value="0.0"/>
	</node>
-->
<!-- #######################################  start Rviz ############################################ -->

  <node pkg="rviz" type="rviz" name="rviz"/>
  <!-- ############################# hector mapping ################################################## -->

 <arg name="tf_map_scanmatch_transform_frame_name" default="scanmatcher_frame"/>
  <arg name="base_frame" default="base_footprint"/>
  <arg name="odom_frame" default="odom_combined"/>
  <arg name="pub_map_odom_transform" default="true"/>
  <arg name="scan_subscriber_queue_size" default="5"/>
  <arg name="scan_topic" default="base_scan/scan"/>
  <arg name="map_size" default="2048"/>
  
  <node pkg="hector_mapping" type="hector_mapping" name="hector_mapping" output="screen">
    
    <!-- Frame names -->
    <param name="map_frame" value="map" />
    <param name="base_frame" value="$(arg base_frame)" />
    <param name="odom_frame" value="$(arg odom_frame)" />
    
    <!-- Tf use -->
    <param name="use_tf_scan_transformation" value="true"/>
    <param name="use_tf_pose_start_estimate" value="false"/>
    <param name="pub_map_odom_transform" value="$(arg pub_map_odom_transform)"/>
    
    <!-- Map size / start point -->
    <param name="map_resolution" value="0.050"/>
    <param name="map_size" value="$(arg map_size)"/>
    <param name="map_start_x" value="0.5"/>
    <param name="map_start_y" value="0.5" />
    <param name="map_multi_res_levels" value="2" />
    
    <!-- Map update parameters -->
    <param name="update_factor_free" value="0.4"/>
    <param name="update_factor_occupied" value="0.9" />    
    <param name="map_update_distance_thresh" value="0.4"/>
    <param name="map_update_angle_thresh" value="0.06" />
    <param name="laser_z_min_value" value = "-1.0" />
    <param name="laser_z_max_value" value = "1.0" />
    
    <!-- Advertising config --> 
    <param name="advertise_map_service" value="true"/>
    
    <param name="scan_subscriber_queue_size" value="$(arg scan_subscriber_queue_size)"/>
    <param name="scan_topic" value="$(arg scan_topic)"/>
    
    <!-- Debug parameters -->
    <!--
      <param name="output_timing" value="false"/>
      <param name="pub_drawings" value="true"/>
      <param name="pub_debug_output" value="true"/>
    -->
    <param name="tf_map_scanmatch_transform_frame_name" value="$(arg tf_map_scanmatch_transform_frame_name)" />
  </node>
  
<!-- ##########################################  static transforms  ####################################### -->
  <node pkg="tf" type="static_transform_publisher" name="map_odom_combined_broadcaster" args="0 0 0 0 0 0 map odom_combined 100"/>
  <node pkg="tf" type="static_transform_publisher" name="map_odom_broadcaster" args="0 0 0 0 0 0 map odom 100"/> 
<!--  <node pkg="tf" type="static_transform_publisher" name="laser_base_link_broadcaster" args="0 0 0 0 0 0 /map /base_scan/scan 100"/>   eventl für scan_matcher  -->

<!-- #######################################  Laser_Scan_Matcher #########################################
<node pkg="laser_scan_matcher" type="laser_scan_matcher_node" 
    name="laser_scan_matcher_node" output="screen">

    <param name="use_cloud_input_" value="false"/>
    <param name="use_imu" value="true"/>
    <param name="use_vel"        value="false"/>
    <param name="use_odom" value="false"/>
    <param name="fixed_frame" value = "odom_combined"/>
    <param name="max_iterations" value="10"/>

  </node>
-->
</launch>
